{
  "name": "rag-query-db",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "execute-query",
        "responseMode": "responseNode",
        "options": {}
      },
      "name": "Start Webhook",
      "position": [
        540,
        -100
      ],
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "webhookId": "query-executor",
      "id": "4579b82c-72ef-4ad1-b63a-0c8cead7c5e8"
    },
    {
      "parameters": {
        "functionCode": "// Get all rows from the SQL node\nconst allItems = $input.all();\n\n// Extract the raw data (each item.json is one row)\nconst results = allItems.map(item => item.json);\n\n// Optional: Format specific fields, like dates\nconst formattedResults = results.map(row => {\n  const formattedRow = { ...row };\n  // Example: If you have a 'created_at' field to format\n  if (formattedRow.created_at) {\n    formattedRow.created_at = new Date(formattedRow.created_at).toISOString();\n  }\n  // Add more formatting here if needed (e.g., numbers, strings)\n  return formattedRow;\n});\n\n// Return everything as a single JSON object\nreturn {\n  json: {\n    results: formattedResults,\n    rowCount: formattedResults.length, // Handy metadata\n    timestamp: new Date().toISOString() // Optional: when it ran\n  }\n};"
      },
      "name": "Format SQL Results",
      "position": [
        1140,
        -100
      ],
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "id": "f03c6f73-f13d-4739-a254-2accf5bdc165"
    },
    {
      "parameters": {
        "table": "audit_logs",
        "columns": {
          "column": [
            {
              "name": "query_text",
              "value": "={{ $json.query }}"
            },
            {
              "name": "user_input",
              "value": "={{ $json.userQuery }}"
            },
            {
              "name": "execution_time",
              "value": "={{ $json.executionTime }}"
            },
            {
              "name": "row_count",
              "value": "={{ $json.rowCount }}"
            },
            {
              "name": "response_status",
              "value": "success"
            }
          ]
        },
        "options": {}
      },
      "name": "Log to Audit Table",
      "position": [
        1140,
        60
      ],
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "id": "b1de155a-a203-4ce6-922d-b562848e3e28",
      "credentials": {
        "mySql": {
          "id": "PSZ4oX1SyoQ5jRK5",
          "name": "MySQL account"
        }
      }
    },
    {
      "parameters": {
        "fileName": "={{ 'query_' + new Date().toISOString().replace(/[:.]/g, '-') + ($json.requestId ? '_' + $json.requestId.substring(0, 8) : '') + '.json' }}",
        "options": {}
      },
      "name": "Save Results as JSON",
      "position": [
        1340,
        60
      ],
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "id": "340419d5-c15b-44d5-8145-725b89b59385"
    },
    {
      "parameters": {
        "functionCode": "// Get all data from previous nodes\nconst inputData = $input.item.json;\n\n// Build the response object\nconst response = {\n  results: inputData.results,\n  metadata: {\n    rowCount: inputData.rowCount,\n    executionTime: inputData.executionTime,\n    timestamp: inputData.timestamp,\n    query: inputData.query,\n  },\n  // We'd include this in stage 2 of RAG process\n  naturalLanguageResponse: inputData.naturalLanguageResponse || null,\n  jsonFilename: `query_${new Date().toISOString().replace(/[:.]/g, '-')}${inputData.requestId ? '_' + inputData.requestId.substring(0, 8) : ''}.json`\n};\n\nreturn { json: response };"
      },
      "name": "Prepare Response",
      "position": [
        1340,
        -100
      ],
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "id": "86b1ea69-072a-4843-b1ca-8caca5c3cc56"
    },
    {
      "parameters": {
        "functionCode": "// Get the error information\nconst error = $input.json;\n\n// Format the error response\nreturn {\n  json: {\n    error: error.message || 'Query execution failed',\n    details: error.description || error.stack || '',\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "name": "Handle Error",
      "position": [
        920,
        60
      ],
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "id": "5c471c7e-8d96-4ea2-a1ea-f925daf70045"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1580,
        -100
      ],
      "id": "c04de4bd-f0dd-4178-9d61-6d03bd94353c",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.body.query }}"
      },
      "name": "Execute_SQL_Query",
      "position": [
        760,
        -100
      ],
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 1,
      "id": "b3600b85-ca21-43ed-8ff7-ad6fc4b74801",
      "credentials": {
        "mySql": {
          "id": "PSZ4oX1SyoQ5jRK5",
          "name": "MySQL account"
        }
      },
      "onError": "continueErrorOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Format SQL Results": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log to Audit Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log to Audit Table": {
      "main": [
        [
          {
            "node": "Save Results as JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start Webhook": {
      "main": [
        [
          {
            "node": "Execute_SQL_Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Results as JSON": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Log to Audit Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute_SQL_Query": {
      "main": [
        [
          {
            "node": "Format SQL Results",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c15dcbc2-a086-424d-b6c2-1d30fc20629d",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5b7ccff831bb79c622d4794a561af6c05dd87ebac9ea8df666ea9ef9701477f"
  },
  "id": "C67WM6n9AiGG5UOp",
  "tags": []
}